// ConsoleApplication1.cpp : 定义控制台应用程序的入口点。//#include "stdafx.h"#include<stdio.h>#include<string.h>#include<stdlib.h>#include<ctype.h>typedef struct{	char num[8];					 //8位学号	char name[20];					 //姓名	char score[3];						 //成绩}Student;							 //学生信息定义typedef struct ListNode{	Student data;					 //数据域	struct ListNode *next;			 //指针域}ListNode, *LinkList;				 //链表的定义LinkList CreatListR1(void);			 //函数，用尾插入法建立带头结点的单链表									 //LinkList CreatList(void);			 //函数，用头插入法建立带头结点的单链表ListNode *LocateNode(LinkList, char name[20]);				 //函数，按值查找结点void printlist(LinkList);					 //函数，打印链表中的所有值void DeleteAll(LinkList);					 //函数，删除所有结点，释放内存void locatename(LinkList);					 //函数，1.根据姓名查找学生void locatenum(LinkList);					 //函数，2.指定位置查找学生void addstudent(LinkList);					 //函数，3.插入新学生信息void deletestudent(LinkList);				 //函数，4.删除指定学生int allnum(LinkList);						 //函数，5.统计学生个数 //==========主函数=================void main(){	int a = 1;	LinkList head;	head = CreatListR1();			 //用尾插入法建立单链表，返回头指针	printf("\nThis is your student list\n");	printlist(head);				 //遍历链表输出其值	printf("input the num of function\n");	while (a)					//菜单	{		printf("1.根据姓名查找学生\n ");		printf("2.指定位置查找学生\n");		printf("3.插入新学生信息\n");		printf("4.删除指定学生\n");		printf("5.统计学生个数\n");		printf("0.退出\n");		scanf("%d", &a);		switch (a)		{		case 1 :			locatename(head); break;		case 2 :			locatenum(head); break;		case 3 :			addstudent(head); break;		case 4 :			deletestudent(head); break;		case 5 :			printf("%d\n", allnum(head)); break;		case 0 :break;		}	}	printf("Thinks for using~\n");	DeleteAll(head);	system("pause");}//=========根据姓名查找学生==========void locatename(LinkList head){	char name[20];	ListNode *p;	printf("input the name of the student\n");	scanf("%s", &name);	p = LocateNode(head, name);	if (p == NULL)		printf("Can't find this student.\n");	else	{		printf("学号\t");		printf("成绩\n");		printf("%s\t", p->data.num);		printf("%s\n", p->data.score);	}	printf("\n");}//==========指定位置查找学生==========void  locatenum(LinkList head){	int a = 0;	ListNode *p = head->next;	printf("input the number of the position.\n");	scanf("%d", &a);	if (a > allnum(head) || a <= 0)		printf("we don't have so many student.\n");	else	{		for (int i = 1; i < a; i++)		{			p = p->next;		}		printf("学号\t姓名\t成绩\n");		printf("%s\t%s\t%s\n", p->data.num, p->data.name, p->data.score);	}	printf("\n");}//===========插入新学生信息==========void addstudent(LinkList head){	int a = 0;	ListNode *p = head, *s;	printf("putin the number of the position where you want add student.\n");	scanf("%d", &a);	if (a-1 > allnum(head) || a < 0)	{		printf("we don't have so many student.\n");	}	else	{		for (int i = 1; i < a; i++)		{			p = p->next;		}		printf("putin the new student.\n");		s = (ListNode*)malloc(sizeof(ListNode));		scanf("%s%s%s", s->data.num, s->data.name, s->data.score);		s->next = p->next;		p->next = s;	}	printlist(head);}//=============删除指定学生=========void deletestudent(LinkList head){	int a = 0;	ListNode *p = head, *r;	printf("putin the number of the position where you want delete student.\n");	scanf("%d", &a);	if (a > allnum(head) || a < 0)	{		printf("we don't have so many student.");	}	else	{		for (int i = 1; i < a; i++)		{			p = p->next;		}		r = p->next;		p->next = p->next->next;		free(r);	}	printlist(head);}//============统计学生个数==========int allnum(LinkList head){	ListNode *p = head->next;	int a = 0;	while (p)	{		a++;		p = p->next;	}	return a;}//===========打印链表=========void printlist(LinkList head){	ListNode *p = head->next;	printf("学号\t姓名\t成绩\n");	while (p)	{		printf("%s\t%s\t%s\n", p->data.num, p->data.name, p->data.score);		p = p->next;	}	printf("\n");}//===========按值查找=========ListNode *LocateNode(LinkList head, char name[20]){	ListNode *p = head->next;	while (p != NULL&& strcmp(p->data.name, name))	{		p = p->next;	}	return p;}//=======尾插法=======LinkList CreatListR1(void){	char ch[10];	LinkList head = (LinkList)malloc(sizeof(ListNode));	ListNode *s, *r,*p;	r = head;	p = head;	r->next = NULL;	printf("input # to end\n");	printf("Please in put student's num ,name,score\n");	while (1)	{		scanf("%s", ch);		if (strcmp(ch, "#") != 1) break;		s = (ListNode*)malloc(sizeof(ListNode));		strcpy(s->data.num, ch);		scanf("%s%s", s->data.name, s->data.score);		r->next = s;		r = s;		r->next = NULL;	}	return head;}//=======清除表单========void DeleteAll(LinkList head){	ListNode *p = head, *r;	while (p->next)	{		r = p->next;		free(p);		p = r;	}	free(p);}